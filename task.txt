В отчёте КНИР описаны цели, структура и работа программы. Я приложил файлы с кодом, который ещё не готов. Вкратце опишу основные требования:

- программа должна проанализировать целевое микросервисное приложение на наличие общих используемых БД/кэшей, на связи между сервисами;

- затем в модуле recommendations она должна сформировать рекомендации по объединению сервисов в кластеры, оптимальному добавлению API Gateway и Prometheus к кластеру/всему приложению, если это нужно;

- по сформированным рекомендациям (в типе Recommendations + некоторые детали внутри MicroserviceInfo) сгенерировать helm-чарты (в отдельном модуле helmgen);

- для наглядности сгенерировать mermaid-код для визуализации сформированной архитектуры в документации.

Теперь по модификациям кода:

- В файлах модуля analyzer есть функционал анализа пакетов и библиотек. Я бы хотел избавиться от этого - там всего не учесть и нет смысла. Сделаем упор на общие БД и другие сервисы.

- Давай избавимся от анализа кэшей - вместо этого пусть кэш будет добавляться в helm-чарт так же, как и API Gateway при необходимости. Поменяй код с учётом того, что подключений к БД у контейнера может быть по несколько. Считай, что типы полей SharedDb в MicroserviceInfo уже изменён на []ContainerDbConnection, где ContainerDbResource это структура с полями dbType, dbHost и dbPort. Соответственно, далее будет проверяться есть ли у разных микросервисов подключения к одинаковым базам (по совпадению хостов).

- Ещё нужно модифицировать анализ связей между сервисами. Отмечу, что проверка на связь между сервисами делается просто - надо найти вхождение названия сервиса в url подключения к нему (при анализе манифеста), либо по depends_on (при анализе docker-compose).

- Я бы хотел ещё расширить функционал. Не факт, что целевое приложение развёрнуто в k8s - надо бы ещё аналогичный анализ docker-compose сделать. Поясню. Приложение может быть развёрнуто в k8s, а может с помощью docker-compose. Нужно будет сначала проверить, в каком оно виде, а потом анализировать либо в одном варианте, либо другом.

- Приложение может быть развёрнуто в k8s, а может только с помощью docker-compose. Нужно будет сначала проверить, в каком оно виде, а потом анализировать либо в одном варианте, либо другом. И ещё. Давай избавимся от анализа кэшей - вместо этого пусть кэш будет добавляться так же, как и API Gateway при необходимости.

- Для начала, учитывая весь имеющийся код, напиши какие и куда изменения внести в коде модуля analyzer, и приведи очень подробную структуру (с типами, интерфейсами, ключевыми методами) обновлённого модуля analyzer в mermaid.


---


Вес для общих БД > явных зависимостей.
Про обработку разных окружений: для сервиса может быть описано сразу несколько, соответственно и рекомендации должны собираться для test/prod по отдельности.
Учитывать имена сервисов не надо - только прямые взаимозависимости.
Также напомню, что модуль recommendations ещё рекомендует добавление в k8s экосистему API Gateway и кэшей, если это нужно


---


Итак, теперь пример. Как этот проект отработает для такого приложения (опиши кратко шаги и сделай итоговые helm-чарты и итоговую структуру в mermaid:
- Микросервисы: user_auth, user_client, user_service, order_service, watchdog, issuemanaging_service, issuemanaging_cli, issuemanaging_auth),
- БД: users, orders, products, issues.
- Связи с БД: user_auth - users, user_client - users, user_service - orders, order_sevice - orders, watchdog - {orders, products, issues}, issuemanaging_service - issues, issuemanaging_auth - users
- Связи между сервисами - user_client - user_service, user_service - order_service, issuemanaging_service - issuemanaging_cli, issuemanaging_service - watchdog, issuemanaging_auth - issuemanaging_service.


Вернёмся к тому примеру. Поможешь собрать эти конейнеры (пока только dockerfile и docker-compose файлы)? Для этого примера всё будет на go и БД будут postgresql, размещение на wsl ubuntu 22.04.

Поясни, как от сгенерированных helm чартов перейти к тестам (без нагрузочных, без метрик - просто проверить доступность) и оценке оптимальности сгенерированной архитектуры.